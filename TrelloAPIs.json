{
	"info": {
		"_postman_id": "7ec34bc5-3064-43ba-87ca-60051bfe5571",
		"name": "Trello APIs",
		"description": "## Testing API documentation for the website \"[Trello](https://developer.atlassian.com/cloud/trello/rest/api-group-actions/#api-group-actions)\"\n\nThe tests cover various endpoints and scenarios to ensure the API's functionality and reliability. The project is designed to be easily extendable and maintainable.\n\n#### Tasks\n\n- CREATE Board\n- GET Board\n- UPDATE Board\n- CREATE List\n- GET List\n- UPDATE List\n- CREATE Card\n- GET Card\n- GET Field on Card(id)\n- UPDATE Card\n- CREATE a new Label on a Card\n- CREATE Attachment On Card\n- GET an Attachment on a Card\n- CREATE Checklist\n- GET Checklist\n- UPDATE Checklist\n- CREATE Checkitem\n- GET Checkitem\n- DELETE Checkitem\n- DELETE Checklist\n- DELETE Attachment On Card\n- DELETE Card\n- DELETE Board",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30312474"
	},
	"item": [
		{
			"name": "CREATE BOARD",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get a random name of the board\r",
							"function getboardnameItem() {\r",
							"    var boardname = [\"Banking project\", \"Mobile app project\", \"salles project\", \"Civil project\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * boardname.length);\r",
							"    return boardname[randomIndex];\r",
							"}\r",
							"\r",
							"// Get a random name of the Desc\r",
							"function getDescItem() {\r",
							"    var desc = [\"A project has a lot of features that will allow the user to access his accounts and discover what he want to do\", \"The project describe a lot of functions like Home edit accounts and view accounts\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * desc.length);\r",
							"    return desc[randomIndex];\r",
							"}\r",
							"// Get a random bool for defaultlist\r",
							"function randombool() {\r",
							"    return Math.random() < .1;   \r",
							"}\r",
							"// Make an environment variable called board name \r",
							"pm.environment.set(\"board name\", getboardnameItem());\r",
							"// Make an environment variable called Desc \r",
							"pm.environment.set(\"desc\", getDescItem());\r",
							"// Make an environment variable called random bool\r",
							"pm.environment.set(\"random bool\", randombool());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is POST\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"POST\");\r",
							"});\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							" \r",
							" // Make a variable to store jsondata\r",
							"var jsonData = pm.response.json();\r",
							"// make a variable called board id\r",
							"pm.environment.set(\"board id\", jsonData.id);\r",
							"\r",
							"// check the name of the board\r",
							"var boardname = pm.environment.get(\"board name\");\r",
							"pm.test(\"Board Name is correct\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(boardname);\r",
							"});\r",
							"// check the id of the board\r",
							"var boardid = pm.environment.get(\"board id\");\r",
							"pm.test(\"Board id is correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(boardid);\r",
							"});\r",
							"// check the Desc of the board\r",
							"var desc = pm.environment.get(\"desc\");\r",
							"pm.test(\"Desc is correct\", function () {\r",
							"    pm.expect(jsonData.desc).to.eql(desc);\r",
							"});\r",
							"\r",
							"// Verify the response contains the necessary properties\r",
							"pm.test(\"Response contains the necessary properties\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"desc\");\r",
							"    pm.expect(jsonData).to.have.property(\"closed\");\r",
							"    pm.expect(jsonData).to.have.property(\"descData\");\r",
							"    pm.expect(jsonData).to.have.property(\"idOrganization\");\r",
							"    pm.expect(jsonData).to.have.property(\"idEnterprise\");\r",
							"    pm.expect(jsonData).to.have.property(\"pinned\");\r",
							"    pm.expect(jsonData).to.have.property(\"url\");\r",
							"    pm.expect(jsonData).to.have.property(\"shortUrl\");\r",
							"    pm.expect(jsonData).to.have.property(\"prefs\");\r",
							"});\r",
							"// check the Prefs of the board\r",
							"pm.test(\"prefs contains permissionLevel, hideVotes, voting, comments,invitations,selfJoin, cardCovers,isTemplate,cardAging and calendarFeedEnabled \", function () {\r",
							"    pm.expect(jsonData.prefs.permissionLevel).to.eq(\"private\");\r",
							"    pm.expect(jsonData.prefs.hideVotes).to.be.false;\r",
							"    pm.expect(jsonData.prefs.voting).to.eq(\"disabled\");\r",
							"    pm.expect(jsonData.prefs.comments).to.eq(\"members\");\r",
							"    pm.expect(jsonData.prefs.invitations).to.eq(\"members\");\r",
							"    pm.expect(jsonData.prefs.selfJoin).to.be.true;\r",
							"    pm.expect(jsonData.prefs.isTemplate).to.be.false;\r",
							"    pm.expect(jsonData.prefs.cardAging).to.eq(\"regular\");\r",
							"    pm.expect(jsonData.prefs.calendarFeedEnabled).to.be.false;\r",
							"});\r",
							"// Verify there is no field in the API response equal null\r",
							"// check the name of the board is not equal null\r",
							"pm.test(\"Th name of board is not equal null \", function () {\r",
							"        pm.expect(jsonData.name).to.not.eql(null);\r",
							"});\r",
							"// check the Desc of the board is not equal null\r",
							"pm.test(\"Th Desc of board is not equal null \", function () {\r",
							"        pm.expect(jsonData.desc).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// Verify the id field is a non-empty\r",
							"pm.test(\"The id field is a non-empty \", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the name field is a non-empty\r",
							"pm.test(\"The name field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the desc field is a non-empty \r",
							"pm.test(\"The desc field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.desc).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the name of the Board is string\r",
							"pm.test(\"The name of Board is String\", function () {\r",
							"        pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"// check the desc of the board is String\r",
							"pm.test(\"The desc of the board is string\", function () {\r",
							"    pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id of the board is string\r",
							"pm.test(\"The id board is string \", function () {\r",
							"    pm.expect(typeof jsonData.id).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id Organization is string\r",
							"pm.test(\"The idOrganization is string \", function () {\r",
							"    pm.expect(typeof jsonData.idOrganization).to.be.eql(\"string\");\r",
							"});\r",
							"// check the closed is boolean\r",
							"pm.test(\"The closed field is boolean\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.closed).to.be.a('boolean');\r",
							"});\r",
							"// check the pinned is boolean\r",
							"pm.test(\"The pinned field is boolean\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.pinned).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"// Verify the Schema is valid\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      id: { type: \"string\" },\r",
							"      name: { type: \"string\" },\r",
							"      desc: { type: \"string\" },\r",
							"      descData: { type: \"null\" },\r",
							"      closed: { type: \"boolean\" },\r",
							"      idOrganization: { type: \"string\" },\r",
							"      idEnterprise: { type: [\"string\", \"null\"] },\r",
							"      pinned: { type: \"boolean\" },\r",
							"      url: { type: \"string\" },\r",
							"      shortUrl: { type: \"string\" },\r",
							"      prefs: {\r",
							"        type: \"object\",\r",
							"        properties: {\r",
							"          permissionLevel: { type: \"string\" },\r",
							"          hideVotes: { type: \"boolean\" },\r",
							"          voting: { type: \"string\" },\r",
							"          comments: { type: \"string\" },\r",
							"          invitations: { type: \"string\" },\r",
							"          selfJoin: { type: \"boolean\" },\r",
							"          cardCovers: { type: \"boolean\" },\r",
							"          isTemplate: { type: \"boolean\" },\r",
							"          cardAging: { type: \"string\" },\r",
							"          calendarFeedEnabled: { type: \"boolean\" },\r",
							"          hiddenPluginBoardButtons: { type: \"array\" },\r",
							"          switcherViews: {\r",
							"            type: \"array\",\r",
							"            items: {\r",
							"              type: \"object\",\r",
							"              properties: {\r",
							"                viewType: { type: \"string\" },\r",
							"                enabled: { type: \"boolean\" }\r",
							"              },\r",
							"              required: [\"viewType\", \"enabled\"]\r",
							"            }\r",
							"          },\r",
							"          background: { type: \"string\" },\r",
							"          backgroundColor: { type: \"string\" },\r",
							"          backgroundImage: { type: [\"string\", \"null\"] },\r",
							"          backgroundImageScaled: { type: [\"array\", \"null\"] },\r",
							"          backgroundTile: { type: \"boolean\" },\r",
							"          backgroundBrightness: { type: \"string\" },\r",
							"          backgroundBottomColor: { type: \"string\" },\r",
							"          backgroundTopColor: { type: \"string\" },\r",
							"          canBePublic: { type: \"boolean\" },\r",
							"          canBeEnterprise: { type: \"boolean\" },\r",
							"          canBeOrg: { type: \"boolean\" },\r",
							"          canBePrivate: { type: \"boolean\" },\r",
							"          canInvite: { type: \"boolean\" }\r",
							"        },\r",
							"        required: [\r",
							"          \"permissionLevel\",\r",
							"          \"hideVotes\",\r",
							"          \"voting\",\r",
							"          \"comments\",\r",
							"          \"invitations\",\r",
							"          \"selfJoin\",\r",
							"          \"cardCovers\",\r",
							"          \"isTemplate\",\r",
							"          \"cardAging\",\r",
							"          \"calendarFeedEnabled\",\r",
							"          \"hiddenPluginBoardButtons\",\r",
							"          \"switcherViews\",\r",
							"          \"background\",\r",
							"          \"backgroundColor\",\r",
							"          \"backgroundImage\",\r",
							"          \"backgroundImageScaled\",\r",
							"          \"backgroundTile\",\r",
							"          \"backgroundBrightness\",\r",
							"          \"backgroundBottomColor\",\r",
							"          \"backgroundTopColor\",\r",
							"          \"canBePublic\",\r",
							"          \"canBeEnterprise\",\r",
							"          \"canBeOrg\",\r",
							"          \"canBePrivate\",\r",
							"          \"canInvite\"\r",
							"        ]\r",
							"      },\r",
							"      labelNames: {\r",
							"        type: \"object\",\r",
							"        properties: {\r",
							"          green: { type: \"string\" },\r",
							"          yellow: { type: \"string\" },\r",
							"          orange: { type: \"string\" },\r",
							"          red: { type: \"string\" },\r",
							"          purple: { type: \"string\" },\r",
							"          blue: { type: \"string\" },\r",
							"          sky: { type: \"string\" },\r",
							"          lime: { type: \"string\" },\r",
							"          pink: { type: \"string\" },\r",
							"          black: { type: \"string\" },\r",
							"          green_dark: { type: \"string\" },\r",
							"          yellow_dark: { type: \"string\" },\r",
							"          orange_dark: { type: \"string\" },\r",
							"          red_dark: { type: \"string\" },\r",
							"          purple_dark: { type: \"string\" },\r",
							"          blue_dark: { type: \"string\" },\r",
							"          sky_dark: { type: \"string\" },\r",
							"          lime_dark: { type: \"string\" },\r",
							"          pink_dark: { type: \"string\" },\r",
							"          black_dark: { type: \"string\" },\r",
							"          green_light: { type: \"string\" },\r",
							"          yellow_light: { type: \"string\" },\r",
							"          orange_light: { type: \"string\" },\r",
							"          red_light: { type: \"string\" },\r",
							"          purple_light: { type: \"string\" },\r",
							"          blue_light: { type: \"string\" },\r",
							"          sky_light: { type: \"string\" },\r",
							"          lime_light: { type: \"string\" },\r",
							"          pink_light: { type: \"string\" },\r",
							"          black_light: { type: \"string\" }\r",
							"        },\r",
							"        required: [\r",
							"          \"green\",\r",
							"          \"yellow\",\r",
							"          \"orange\",\r",
							"          \"red\",\r",
							"          \"purple\",\r",
							"          \"blue\",\r",
							"          \"sky\",\r",
							"          \"lime\",\r",
							"          \"pink\",\r",
							"          \"black\",\r",
							"          \"green_dark\",\r",
							"          \"yellow_dark\",\r",
							"          \"orange_dark\",\r",
							"          \"red_dark\",\r",
							"          \"purple_dark\",\r",
							"          \"blue_dark\",\r",
							"          \"sky_dark\",\r",
							"          \"lime_dark\",\r",
							"          \"pink_dark\",\r",
							"          \"black_dark\",\r",
							"          \"green_light\",\r",
							"          \"yellow_light\",\r",
							"          \"orange_light\",\r",
							"          \"red_light\",\r",
							"          \"purple_light\",\r",
							"          \"blue_light\",\r",
							"          \"sky_light\",\r",
							"          \"lime_light\",\r",
							"          \"pink_light\",\r",
							"          \"black_light\"\r",
							"        ]\r",
							"      },\r",
							"      limits: { type: \"object\" }\r",
							"    },\r",
							"    required: [\r",
							"      \"id\",\r",
							"      \"name\",\r",
							"      \"desc\",\r",
							"      \"descData\",\r",
							"      \"closed\",\r",
							"      \"idOrganization\",\r",
							"      \"idEnterprise\",\r",
							"      \"pinned\",\r",
							"      \"url\",\r",
							"      \"shortUrl\",\r",
							"      \"prefs\",\r",
							"      \"labelNames\",\r",
							"      \"limits\"\r",
							"    ]\r",
							"  };\r",
							"// Verify Response body schema is valid\r",
							"  pm.test(\"Response body schema is valid\", function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"  });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/1/boards/?key={{key}}&name={{board name}}&token={{token}}&defaultLists={{random bool}}&desc={{desc}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "name",
							"value": "{{board name}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "defaultLists",
							"value": "{{random bool}}"
						},
						{
							"key": "desc",
							"value": "{{desc}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET BOARD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is GET\r",
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"GET\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							"// Make a variable to store jsondata\r",
							"var jsonData = pm.response.json();\r",
							"// check the name of the board\r",
							"var boardname = pm.environment.get(\"name\");\r",
							"pm.test(\"Board Name is correct\", function () {\r",
							"    pm.expect(jsonData.boardname).to.eql(boardname);\r",
							"});\r",
							"// check the id of the board\r",
							"var boardid = pm.environment.get(\"board id\");\r",
							"pm.test(\"Board id is correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(boardid);\r",
							"});\r",
							"// check the Desc of the board\r",
							"var desc = pm.environment.get(\"desc\");\r",
							"pm.test(\"Desc is correct\", function () {\r",
							"    pm.expect(jsonData.desc).to.eql(desc);\r",
							"});\r",
							"// Verify the response contains the necessary properties\r",
							"pm.test(\"Response contains the necessary properties\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"desc\");\r",
							"    pm.expect(jsonData).to.have.property(\"closed\");\r",
							"    pm.expect(jsonData).to.have.property(\"descData\");\r",
							"    pm.expect(jsonData).to.have.property(\"idOrganization\");\r",
							"    pm.expect(jsonData).to.have.property(\"idEnterprise\");\r",
							"    pm.expect(jsonData).to.have.property(\"pinned\");\r",
							"    pm.expect(jsonData).to.have.property(\"url\");\r",
							"    pm.expect(jsonData).to.have.property(\"shortUrl\");\r",
							"    pm.expect(jsonData).to.have.property(\"prefs\");\r",
							"});\r",
							"// check the Prefs of the board\r",
							"pm.test(\"prefs contains permissionLevel, hideVotes, voting, comments,invitations,selfJoin, cardCovers,isTemplate,cardAging and calendarFeedEnabled \", function () {\r",
							"    pm.expect(jsonData.prefs.permissionLevel).to.eq(\"private\");\r",
							"    pm.expect(jsonData.prefs.hideVotes).to.be.false;\r",
							"    pm.expect(jsonData.prefs.voting).to.eq(\"disabled\");\r",
							"    pm.expect(jsonData.prefs.comments).to.eq(\"members\");\r",
							"    pm.expect(jsonData.name).to.not.eql(null);\r",
							"});\r",
							"// Verify there is no field in the API response equal null\r",
							"// check the name of the board is not equal null\r",
							"pm.test(\"The board name is not equal null \", function () {\r",
							"        pm.expect(jsonData.name).to.not.eql(null);\r",
							"});\r",
							"// check the Desc of the board is not equal null\r",
							"pm.test(\"Th Desc of the board is not equal null \", function () {\r",
							"        pm.expect(jsonData.desc).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// Verify the id field is a non-empty\r",
							"pm.test(\"The id field is a non-empty \", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the name field is a non-empty\r",
							"pm.test(\"The name field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the desc field is a non-empty \r",
							"pm.test(\"The desc field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.desc).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the name of Board is string\r",
							"pm.test(\"The Board name is String\", function () {\r",
							"        pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id board is string\r",
							"pm.test(\"The id board is string \", function () {\r",
							"    pm.expect(typeof jsonData.id).to.be.eql(\"string\");\r",
							"});\r",
							"// check the desc is of the board is String\r",
							"pm.test(\"The desc of the board is string\", function () {\r",
							"    pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id Organization is string\r",
							"pm.test(\"The id Organization is string \", function () {\r",
							"    pm.expect(typeof jsonData.idOrganization).to.be.eql(\"string\");\r",
							"});\r",
							"// check the closed is boolean\r",
							"pm.test(\"The closed field is boolean\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.closed).to.be.a('boolean');\r",
							"});\r",
							"// check the pinned is boolean\r",
							"pm.test(\"The pinned field is boolean\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.pinned).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"// Verify the Schema is valid\r",
							"pm.test(\"Response schema is valid\", function() {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      id: { type: \"string\" },\r",
							"      name: { type: \"string\" },\r",
							"      desc: { type: \"string\" },\r",
							"      descData: { type: [\"null\", \"object\"] },\r",
							"      closed: { type: \"boolean\" },\r",
							"      idOrganization: { type: [\"string\", \"null\"] },\r",
							"      idEnterprise: { type: [\"string\", \"null\"] },\r",
							"      pinned: { type: \"boolean\" },\r",
							"      url: { type: \"string\" },\r",
							"      shortUrl: { type: \"string\" },\r",
							"      prefs: {\r",
							"        type: \"object\",\r",
							"        properties: {\r",
							"          permissionLevel: { type: \"string\" },\r",
							"          hideVotes: { type: \"boolean\" },\r",
							"          voting: { type: \"string\" },\r",
							"          comments: { type: \"string\" },\r",
							"          invitations: { type: \"string\" },\r",
							"          selfJoin: { type: \"boolean\" },\r",
							"          cardCovers: { type: \"boolean\" },\r",
							"          isTemplate: { type: \"boolean\" },\r",
							"          cardAging: { type: \"string\" },\r",
							"          calendarFeedEnabled: { type: \"boolean\" },\r",
							"          hiddenPluginBoardButtons: { type: \"array\" },\r",
							"          switcherViews: {\r",
							"            type: \"array\",\r",
							"            items: {\r",
							"              type: \"object\",\r",
							"              properties: {\r",
							"                viewType: { type: \"string\" },\r",
							"                enabled: { type: \"boolean\" }\r",
							"              }\r",
							"            }\r",
							"          },\r",
							"          background: { type: \"string\" },\r",
							"          backgroundColor: { type: \"string\" },\r",
							"          backgroundImage: { type: [\"null\", \"string\"] },\r",
							"          backgroundImageScaled: { type: [\"null\", \"array\"] },\r",
							"          backgroundTile: { type: \"boolean\" },\r",
							"          backgroundBrightness: { type: \"string\" },\r",
							"          backgroundBottomColor: { type: \"string\" },\r",
							"          backgroundTopColor: { type: \"string\" },\r",
							"          canBePublic: { type: \"boolean\" },\r",
							"          canBeEnterprise: { type: \"boolean\" },\r",
							"          canBeOrg: { type: \"boolean\" },\r",
							"          canBePrivate: { type: \"boolean\" },\r",
							"          canInvite: { type: \"boolean\" }\r",
							"        },\r",
							"        required: [\r",
							"          \"permissionLevel\",\r",
							"          \"hideVotes\",\r",
							"          \"voting\",\r",
							"          \"comments\",\r",
							"          \"invitations\",\r",
							"          \"selfJoin\",\r",
							"          \"cardCovers\",\r",
							"          \"isTemplate\",\r",
							"          \"cardAging\",\r",
							"          \"calendarFeedEnabled\",\r",
							"          \"hiddenPluginBoardButtons\",\r",
							"          \"switcherViews\",\r",
							"          \"background\",\r",
							"          \"backgroundColor\",\r",
							"          \"backgroundImage\",\r",
							"          \"backgroundImageScaled\",\r",
							"          \"backgroundTile\",\r",
							"          \"backgroundBrightness\",\r",
							"          \"backgroundBottomColor\",\r",
							"          \"backgroundTopColor\",\r",
							"          \"canBePublic\",\r",
							"          \"canBeEnterprise\",\r",
							"          \"canBeOrg\",\r",
							"          \"canBePrivate\",\r",
							"          \"canInvite\"\r",
							"        ]\r",
							"      },\r",
							"      labelNames: {\r",
							"        type: \"object\",\r",
							"        properties: {\r",
							"          green: { type: \"string\" },\r",
							"          yellow: { type: \"string\" },\r",
							"          orange: { type: \"string\" },\r",
							"          red: { type: \"string\" },\r",
							"          purple: { type: \"string\" },\r",
							"          blue: { type: \"string\" },\r",
							"          sky: { type: \"string\" },\r",
							"          lime: { type: \"string\" },\r",
							"          pink: { type: \"string\" },\r",
							"          black: { type: \"string\" },\r",
							"          green_dark: { type: \"string\" },\r",
							"          yellow_dark: { type: \"string\" },\r",
							"          orange_dark: { type: \"string\" },\r",
							"          red_dark: { type: \"string\" },\r",
							"          purple_dark: { type: \"string\" },\r",
							"          blue_dark: { type: \"string\" },\r",
							"          sky_dark: { type: \"string\" },\r",
							"          lime_dark: { type: \"string\" },\r",
							"          pink_dark: { type: \"string\" },\r",
							"          black_dark: { type: \"string\" },\r",
							"          green_light: { type: \"string\" },\r",
							"          yellow_light: { type: \"string\" },\r",
							"          orange_light: { type: \"string\" },\r",
							"          red_light: { type: \"string\" },\r",
							"          purple_light: { type: \"string\" },\r",
							"          blue_light: { type: \"string\" },\r",
							"          sky_light: { type: \"string\" },\r",
							"          lime_light: { type: \"string\" },\r",
							"          pink_light: { type: \"string\" },\r",
							"          black_light: { type: \"string\" }\r",
							"        }\r",
							"      }\r",
							"    },\r",
							"    required: [\r",
							"      \"id\",\r",
							"      \"name\",\r",
							"      \"desc\",\r",
							"      \"descData\",\r",
							"      \"closed\",\r",
							"      \"idOrganization\",\r",
							"      \"idEnterprise\",\r",
							"      \"pinned\",\r",
							"      \"url\",\r",
							"      \"shortUrl\",\r",
							"      \"prefs\",\r",
							"      \"labelNames\"\r",
							"    ]\r",
							"  };\r",
							"// Verify Response body schema is valid\r",
							"  pm.test(\"Response body schema is valid\", function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"  });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/boards/{{board id}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"boards",
						"{{board id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE BOARD ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get a random name of the board\r",
							"function getboardnameItem() {\r",
							"    var boardname = [\"Home project\", \"Store app project\", \"Mechanical project\", \"Vehicle project\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * boardname.length);\r",
							"    return boardname[randomIndex];\r",
							"}\r",
							"// Update an environment variable board name with the new data\r",
							"pm.environment.set(\"board name\", getboardnameItem());\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is PUT\r",
							"pm.test(\"Successful PUT request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"PUT\");\r",
							"});\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							" \r",
							" // Make a variable to store jsondata\r",
							"var jsonData = pm.response.json();\r",
							"// make a variable called board id\r",
							"pm.environment.set(\"board id\", jsonData.id);\r",
							"\r",
							"// check the name of the board\r",
							"var boardname = pm.environment.get(\"board name\");\r",
							"pm.test(\"Board Name is correct\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(boardname);\r",
							"});\r",
							"// check the id of the board\r",
							"var boardid = pm.environment.get(\"board id\");\r",
							"pm.test(\"Board id is correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(boardid);\r",
							"});\r",
							"\r",
							"// Verify the response contains the necessary properties\r",
							"pm.test(\"Response contains the necessary properties\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"desc\");\r",
							"    pm.expect(jsonData).to.have.property(\"closed\");\r",
							"    pm.expect(jsonData).to.have.property(\"descData\");\r",
							"    pm.expect(jsonData).to.have.property(\"idOrganization\");\r",
							"    pm.expect(jsonData).to.have.property(\"idEnterprise\");\r",
							"    pm.expect(jsonData).to.have.property(\"pinned\");\r",
							"    pm.expect(jsonData).to.have.property(\"url\");\r",
							"    pm.expect(jsonData).to.have.property(\"shortUrl\");\r",
							"    pm.expect(jsonData).to.have.property(\"prefs\");\r",
							"});\r",
							"// check the Prefs of the board\r",
							"pm.test(\"prefs contains permissionLevel, hideVotes, voting, comments,invitations,selfJoin, cardCovers,isTemplate,cardAging and calendarFeedEnabled \", function () {\r",
							"    pm.expect(jsonData.prefs.permissionLevel).to.eq(\"private\");\r",
							"    pm.expect(jsonData.prefs.hideVotes).to.be.false;\r",
							"    pm.expect(jsonData.prefs.voting).to.eq(\"disabled\");\r",
							"    pm.expect(jsonData.prefs.comments).to.eq(\"members\");\r",
							"    pm.expect(jsonData.prefs.invitations).to.eq(\"members\");\r",
							"    pm.expect(jsonData.prefs.selfJoin).to.be.true;\r",
							"    pm.expect(jsonData.prefs.isTemplate).to.be.false;\r",
							"    pm.expect(jsonData.prefs.cardAging).to.eq(\"regular\");\r",
							"    pm.expect(jsonData.prefs.calendarFeedEnabled).to.be.false;\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the name of the board is String\r",
							"pm.test(\"The name of the board is string\", function () {\r",
							"    pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"// check the desc of the board is String\r",
							"pm.test(\"The desc of the board is string\", function () {\r",
							"    pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// Verify the id field is a non-empty\r",
							"pm.test(\"The id field is a non-empty \", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the name field is a non-empty\r",
							"pm.test(\"The name field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the desc field is a non-empty \r",
							"pm.test(\"The desc field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.desc).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the name of the Board is string\r",
							"pm.test(\"The name of Board is String\", function () {\r",
							"        pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id of the board is string\r",
							"pm.test(\"The id board is string \", function () {\r",
							"    pm.expect(typeof jsonData.id).to.be.eql(\"string\");\r",
							"});\r",
							"// check the Desc of the board is not equal null\r",
							"pm.test(\"Th Desc of board is not equal null \", function () {\r",
							"        pm.expect(jsonData.desc).to.not.eql(null);\r",
							"});\r",
							"// check the id Organization is string\r",
							"pm.test(\"The idOrganization is string \", function () {\r",
							"    pm.expect(typeof jsonData.idOrganization).to.be.eql(\"string\");\r",
							"});\r",
							"// check the closed is boolean\r",
							"pm.test(\"The closed field is boolean\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.closed).to.be.a('boolean');\r",
							"});\r",
							"// check the pinned is boolean\r",
							"pm.test(\"The pinned field is boolean\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.pinned).to.be.a('boolean');\r",
							"});\r",
							"// Verify the Schema is valid\r",
							"pm.test(\"Response schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      id: {\r",
							"        type: \"string\",\r",
							"        minLength: 1\r",
							"      },\r",
							"      name: {\r",
							"        type: \"string\",\r",
							"        minLength: 1\r",
							"      },\r",
							"      desc: {\r",
							"        type: \"string\",\r",
							"        minLength: 1\r",
							"      },\r",
							"      descData: {\r",
							"        type: [\"null\", \"object\"]\r",
							"      },\r",
							"      closed: {\r",
							"        type: \"boolean\"\r",
							"      },\r",
							"      idOrganization: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      idEnterprise: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      pinned: {\r",
							"        type: \"boolean\"\r",
							"      },\r",
							"      url: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      shortUrl: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      prefs: {\r",
							"        type: \"object\",\r",
							"        properties: {\r",
							"          permissionLevel: {\r",
							"            type: \"string\"\r",
							"          },\r",
							"          hideVotes: {\r",
							"            type: \"boolean\"\r",
							"          },\r",
							"          voting: {\r",
							"            type: \"string\"\r",
							"          },\r",
							"          comments: {\r",
							"            type: \"string\"\r",
							"          },\r",
							"          invitations: {\r",
							"            type: \"string\"\r",
							"          },\r",
							"          selfJoin: {\r",
							"            type: \"boolean\"\r",
							"          },\r",
							"          cardCovers: {\r",
							"            type: \"boolean\"\r",
							"          },\r",
							"          isTemplate: {\r",
							"            type: \"boolean\"\r",
							"          },\r",
							"          cardAging: {\r",
							"            type: \"string\"\r",
							"          },\r",
							"          calendarFeedEnabled: {\r",
							"            type: \"boolean\"\r",
							"          }\r",
							"        },\r",
							"        required: [\"permissionLevel\", \"hideVotes\", \"voting\", \"comments\", \"invitations\", \"selfJoin\", \"cardCovers\", \"isTemplate\", \"cardAging\", \"calendarFeedEnabled\"]\r",
							"      }\r",
							"    },\r",
							"    required: [\"id\", \"name\", \"desc\", \"closed\", \"descData\", \"idOrganization\", \"idEnterprise\", \"pinned\", \"url\", \"shortUrl\", \"prefs\"]\r",
							"  };\r",
							"\r",
							"  var response = pm.response.json();\r",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/boards/{{board id}}?key={{key}}&token={{token}}&name={{board name}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"boards",
						"{{board id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "{{board name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CREATE LIST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is POST\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"POST\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							" // Make a variable to store jsondata\r",
							"var jsonData = pm.response.json();\r",
							" // make a variable called list id  \r",
							"pm.environment.set(\"list id\", jsonData.id);\r",
							"\r",
							"// check the name of the list\r",
							"var listname = pm.environment.get(\"list name\");\r",
							"pm.test(\"List Name is correct\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(listname);\r",
							"});\r",
							"// check the id of the board\r",
							"var boardid = pm.environment.get(\"board id\");\r",
							"pm.test(\"Board id is correct\", function () {\r",
							"    pm.expect(jsonData.idBoard).to.eql(boardid);\r",
							"});\r",
							"\r",
							"// Verify there is no field in the API response equal null\r",
							"// check the id of the list is not equal null\r",
							"pm.test(\"The list id is not equal null \", function () {\r",
							"        pm.expect(jsonData.id).to.not.eql(null);\r",
							"});\r",
							"// check the name of the list is not equal null\r",
							"pm.test(\"The list name is not equal null \", function () {\r",
							"        pm.expect(jsonData.name).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// Verify the response contains the necessary properties\r",
							"pm.test(\"Response contains the necessary properties\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"closed\");\r",
							"    pm.expect(jsonData).to.have.property(\"idBoard\");\r",
							"    pm.expect(jsonData).to.have.property(\"pos\");\r",
							"    pm.expect(jsonData).to.have.property(\"status\");\r",
							"    pm.expect(jsonData).to.have.property(\"limits\");\r",
							"});\r",
							"\r",
							"// Verify the id field is a non-empty\r",
							"pm.test(\"The id field is a non-empty \", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the name field is a non-empty\r",
							"pm.test(\"The name field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the idboard field is a non-empty\r",
							"pm.test(\"The idboard field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.idBoard).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the name of the list is String\r",
							"pm.test(\"The name of the list is string\", function () {\r",
							"    pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id of the list is String\r",
							"pm.test(\"The id of the list is string\", function () {\r",
							"    pm.expect(typeof jsonData.id).to.be.eql(\"string\");\r",
							"});\r",
							"// check the closed is boolean\r",
							"pm.test(\"The closed field is boolean\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.closed).to.be.a('boolean');\r",
							"});\r",
							"// check the id Board is String\r",
							"pm.test(\"The id Board is string\", function () {\r",
							"    pm.expect(typeof jsonData.idBoard).to.be.eql(\"string\");\r",
							"});\r",
							"// check the pos is number\r",
							"pm.test(\"The pos is number\", function () {\r",
							"    pm.expect(typeof jsonData.pos).to.be.eql(\"number\");\r",
							"});\r",
							"// Verify the Schema is valid\r",
							"pm.test(\"Response schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      id: { type: \"string\" },\r",
							"      name: { type: \"string\" },\r",
							"      closed: { type: \"boolean\" },\r",
							"      idBoard: { type: \"string\" },\r",
							"      pos: { type: \"number\" },\r",
							"      status: { type: [\"string\", \"null\"] },\r",
							"      limits: { type: \"object\" }\r",
							"    },\r",
							"    required: [\"id\", \"name\", \"closed\", \"idBoard\", \"pos\", \"status\", \"limits\"]\r",
							"  };\r",
							"// Verify Response body schema is valid\r",
							"  pm.test(\"Response body schema is valid\", function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"  });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get a random name of the List\r",
							"function getlistnameItem() {\r",
							"    var listname = [\"Product Backlog\",\"Developement station\",\"Testing Station\", \"To Do\",\"Doing\",\"Done\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * listname.length);\r",
							"    return listname[randomIndex];\r",
							"}\r",
							"// Make an environment variable called list name \r",
							"pm.environment.set(\"list name\", getlistnameItem());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/boards/{{board id}}/lists?name={{list name}}&key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"boards",
						"{{board id}}",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "{{list name}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET LIST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is GET\r",
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"GET\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"// Make a variable to store jsondata\r",
							"var jsonData = pm.response.json();\r",
							"// check the name of the list\r",
							"var listname = pm.environment.get(\"list name\");\r",
							"pm.test(\"List Name is correct\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(listname);\r",
							"});\r",
							"// check the id of the board\r",
							"var boardid = pm.environment.get(\"board id\");\r",
							"pm.test(\"Board id is correct\", function () {\r",
							"    pm.expect(jsonData.idBoard).to.eql(boardid);\r",
							"});\r",
							"\r",
							"// Verify there is no field in the API response equal null\r",
							"// check the id of the list is not equal null\r",
							"pm.test(\"The list id is not equal null \", function () {\r",
							"        pm.expect(jsonData.id).to.not.eql(null);\r",
							"});\r",
							"// check the name of the list is not equal null\r",
							"pm.test(\"The list name is not equal null \", function () {\r",
							"        pm.expect(jsonData.name).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// Verify the response contains the necessary properties\r",
							"pm.test(\"Response contains the necessary properties\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"closed\");\r",
							"    pm.expect(jsonData).to.have.property(\"idBoard\"); \r",
							"    pm.expect(jsonData).to.have.property(\"pos\");\r",
							"    pm.expect(jsonData).to.have.property(\"status\");\r",
							"});\r",
							"\r",
							"// Verify the id field is a non-empty\r",
							"pm.test(\"The id field is a non-empty \", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the name field is a non-empty\r",
							"pm.test(\"The name field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify that the idboard field is a non-empty\r",
							"pm.test(\"The id board field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.idBoard).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the name of the list is String\r",
							"pm.test(\"The name of the list is string\", function () {\r",
							"    pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id of the list is String\r",
							"pm.test(\"The id of the list is string\", function () {\r",
							"    pm.expect(typeof jsonData.id).to.be.eql(\"string\");\r",
							"});\r",
							"// check the closed is boolean\r",
							"pm.test(\"The closed field is boolean\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.closed).to.be.a('boolean');\r",
							"});\r",
							"// check the idBoard is String\r",
							"pm.test(\"The idBoard is string\", function () {\r",
							"    pm.expect(typeof jsonData.idBoard).to.be.eql(\"string\");\r",
							"});\r",
							"// check the pos is number\r",
							"pm.test(\"The pos is number\", function () {\r",
							"    pm.expect(typeof jsonData.pos).to.be.eql(\"number\");\r",
							"});\r",
							"\r",
							"// Verify the Schema is valid\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      id: {\r",
							"        type: \"string\",\r",
							"        minLength: 1\r",
							"      },\r",
							"      name: {\r",
							"        type: \"string\",\r",
							"        minLength: 1\r",
							"      },\r",
							"      closed: {\r",
							"        type: \"boolean\"\r",
							"      },\r",
							"      idBoard: {\r",
							"        type: \"string\",\r",
							"        minLength: 1\r",
							"      },\r",
							"      pos: {\r",
							"        type: \"number\"\r",
							"      },\r",
							"      status: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      }\r",
							"    },\r",
							"    required: [\"id\", \"name\", \"closed\", \"idBoard\", \"pos\", \"status\"],\r",
							"  };\r",
							"// Verify Response body schema is valid\r",
							"  pm.test(\"Response body schema is valid\", function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"  });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/lists/{{list id}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"lists",
						"{{list id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE LIST",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get a random name of the List\r",
							"function getlistnameItem() {\r",
							"    var listname = [\"Product Backlog\",\"Developement station\",\"Testing Station\", \"To Do\",\"Doing\",\"Done\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * listname.length);\r",
							"    return listname[randomIndex];\r",
							"}\r",
							"// Update an environment variable list name with the new data\r",
							"pm.environment.set(\"list name\", getlistnameItem());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is PUt\r",
							"pm.test(\"Successful PUt request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"PUT\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							" // Make a variable to store jsondata\r",
							"var jsonData = pm.response.json();\r",
							" // make a variable called list id  \r",
							"pm.environment.set(\"list id\", jsonData.id);\r",
							"\r",
							"// check the name of the list\r",
							"var listname = pm.environment.get(\"list name\");\r",
							"pm.test(\"List Name is correct\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(listname);\r",
							"});\r",
							"// check the id of the board\r",
							"var boardid = pm.environment.get(\"board id\");\r",
							"pm.test(\"Board id is correct\", function () {\r",
							"    pm.expect(jsonData.idBoard).to.eql(boardid);\r",
							"});\r",
							"\r",
							"// Verify there is no field in the API response equal null\r",
							"// check the id of the list is not equal null\r",
							"pm.test(\"The list id is not equal null \", function () {\r",
							"        pm.expect(jsonData.id).to.not.eql(null);\r",
							"});\r",
							"// check the name of the list is not equal null\r",
							"pm.test(\"The list name is not equal null \", function () {\r",
							"        pm.expect(jsonData.name).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// Verify the response contains the necessary properties\r",
							"pm.test(\"Response contains the necessary properties\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"closed\");\r",
							"    pm.expect(jsonData).to.have.property(\"idBoard\");\r",
							"    pm.expect(jsonData).to.have.property(\"pos\");\r",
							"    pm.expect(jsonData).to.have.property(\"status\");\r",
							"});\r",
							"\r",
							"// Verify the id field is a non-empty\r",
							"pm.test(\"The id field is a non-empty \", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the name field is a non-empty\r",
							"pm.test(\"The name field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the idboard field is a non-empty\r",
							"pm.test(\"The idboard field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.idBoard).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the name of the list is String\r",
							"pm.test(\"The name of the list is string\", function () {\r",
							"    pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id of the list is String\r",
							"pm.test(\"The id of the list is string\", function () {\r",
							"    pm.expect(typeof jsonData.id).to.be.eql(\"string\");\r",
							"});\r",
							"// check the closed is boolean\r",
							"pm.test(\"The closed field is boolean\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.closed).to.be.a('boolean');\r",
							"});\r",
							"// check the id Board is String\r",
							"pm.test(\"The id Board is string\", function () {\r",
							"    pm.expect(typeof jsonData.idBoard).to.be.eql(\"string\");\r",
							"});\r",
							"// check the pos is number\r",
							"pm.test(\"The pos is number\", function () {\r",
							"    pm.expect(typeof jsonData.pos).to.be.eql(\"number\");\r",
							"});\r",
							"\r",
							"// Verify the Schema is valid\r",
							"pm.test(\"Response schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      id: { type: \"string\" },\r",
							"      name: { type: \"string\" },\r",
							"      closed: { type: \"boolean\" },\r",
							"      idBoard: { type: \"string\" },\r",
							"      pos: { type: \"number\" },\r",
							"      status: { type: [\"string\", \"null\"] }\r",
							"    },\r",
							"    required: [\"id\", \"name\", \"closed\", \"idBoard\", \"pos\"]\r",
							"  };\r",
							"\r",
							"// Verify Response body schema is valid\r",
							"  pm.test(\"Response body schema is valid\", function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"  });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/lists/{{list id}}?key={{key}}&token={{token}}&name={{list name}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"lists",
						"{{list id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "{{list name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CREATE CARD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is POST\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"POST\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							" // Make a variable to store jsondata\r",
							"var jsonData = pm.response.json();\r",
							" // make a variable called Card id \r",
							"pm.environment.set(\"card id\", jsonData.id);\r",
							"// check the name of the Card\r",
							"var cardname = pm.environment.get(\"Card name\");\r",
							"pm.test(\"Card Name is correct\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(cardname);\r",
							"});\r",
							"// check the id of the Card\r",
							"var cardid = pm.environment.get(\"card id\");\r",
							"pm.test(\"Card id is correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(cardid);\r",
							"});\r",
							"// check the id of the board\r",
							"var boardid = pm.environment.get(\"board id\");\r",
							"pm.test(\"Board id is correct\", function () {\r",
							"    pm.expect(jsonData.idBoard).to.eql(boardid);\r",
							"});\r",
							"// Verify the response contains the necessary properties\r",
							"pm.test(\"Response contains the necessary properties\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"badges\");\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"checkItemStates\");\r",
							"    pm.expect(jsonData).to.have.property(\"closed\");\r",
							"    pm.expect(jsonData).to.have.property(\"dueComplete\");\r",
							"    pm.expect(jsonData).to.have.property(\"dateLastActivity\");\r",
							"    pm.expect(jsonData).to.have.property(\"desc\");\r",
							"    pm.expect(jsonData).to.have.property(\"descData\");\r",
							"    pm.expect(jsonData).to.have.property(\"due\");\r",
							"    pm.expect(jsonData).to.have.property(\"dueReminder\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"    pm.expect(jsonData).to.have.property(\"idBoard\");\r",
							"    pm.expect(jsonData).to.have.property(\"idList\");\r",
							"    pm.expect(jsonData).to.have.property(\"idMembers\");\r",
							"    pm.expect(jsonData).to.have.property(\"idMembersVoted\");\r",
							"    pm.expect(jsonData).to.have.property(\"idShort\");\r",
							"    pm.expect(jsonData).to.have.property(\"idAttachmentCover\");\r",
							"    pm.expect(jsonData).to.have.property(\"labels\");\r",
							"    pm.expect(jsonData).to.have.property(\"idLabels\");\r",
							"    pm.expect(jsonData).to.have.property(\"manualCoverAttachment\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"pos\");\r",
							"    pm.expect(jsonData).to.have.property(\"shortLink\");\r",
							"    pm.expect(jsonData).to.have.property(\"shortUrl\");\r",
							"    pm.expect(jsonData).to.have.property(\"start\");\r",
							"    pm.expect(jsonData).to.have.property(\"subscribed\");\r",
							"    pm.expect(jsonData).to.have.property(\"url\");\r",
							"    pm.expect(jsonData).to.have.property(\"cover\");\r",
							"    pm.expect(jsonData).to.have.property(\"isTemplate\");\r",
							"    pm.expect(jsonData).to.have.property(\"cardRole\");\r",
							"    pm.expect(jsonData).to.have.property(\"attachments\");\r",
							"    pm.expect(jsonData).to.have.property(\"stickers\");\r",
							"    pm.expect(jsonData).to.have.property(\"limits\");\r",
							"});\r",
							"\r",
							"// Verify the id field is a non-empty\r",
							"pm.test(\"The id field is a non-empty \", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"// Verify the name field is a non-empty\r",
							"pm.test(\"The name field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the id board field is a non-empty\r",
							"pm.test(\"The id board field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.idBoard).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"// Verify there is no field in the API response equal null\r",
							"// check the Id of the Card is not equal null\r",
							"pm.test(\"The Card id is not equal null \", function () {\r",
							"        pm.expect(jsonData.id).to.not.eql(null);\r",
							"});\r",
							"// check the name of the Card is not equal null\r",
							"pm.test(\"The Card name is not equal null \", function () {\r",
							"        pm.expect(jsonData.name).to.not.eql(null);\r",
							"});\r",
							"// check the id of the board is not equal null\r",
							"pm.test(\"The board id is not equal null \", function () {\r",
							"        pm.expect(jsonData.idBoard).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the name of card is string\r",
							"pm.test(\"The name of card data is String\", function () {\r",
							"        pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id is string\r",
							"pm.test(\"The id is string \", function () {\r",
							"    pm.expect(typeof jsonData.id).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id Board is string\r",
							"pm.test(\"The Board id is string \", function () {\r",
							"    pm.expect(typeof jsonData.idBoard).to.be.eql(\"string\");\r",
							"});\r",
							"// check the checkItemStates is array\r",
							"pm.test(\"The checkItemStates is array\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.checkItemStates).to.exist.and.to.be.an('array');\r",
							"});\r",
							"// check the idMembers is array\r",
							"pm.test(\"The idMembers is array\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.idMembers).to.exist.and.to.be.an('array');\r",
							"});\r",
							"// check the idMembersVoted is array\r",
							"pm.test(\"The idMembersVoted is array\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.idMembersVoted).to.exist.and.to.be.an('array');\r",
							"});\r",
							"// check the labels is array\r",
							"pm.test(\"The labels is array\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.labels).to.exist.and.to.be.an('array');\r",
							"});\r",
							"// check the idLabels is array\r",
							"pm.test(\"The idLabels is array\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.idLabels).to.exist.and.to.be.an('array');\r",
							"});\r",
							"// check the closed is boolean\r",
							"pm.test(\"The closed field is boolean\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.closed).to.be.a('boolean');\r",
							"});\r",
							"// check the closed is boolean\r",
							"pm.test(\"The dueComplete field is boolean\", function () {\r",
							"  pm.expect(jsonData.dueComplete).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"// Verify the Schema is valid\r",
							"pm.test(\"Response schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      id: { type: \"string\" },\r",
							"      badges: { type: \"object\" },\r",
							"      checkItemStates: { type: \"array\" },\r",
							"      closed: { type: \"boolean\" },\r",
							"      dueComplete: { type: \"boolean\" },\r",
							"      dateLastActivity: { type: \"string\" },\r",
							"      desc: { type: \"string\" },\r",
							"      descData: { type: \"object\" },\r",
							"      due: { type: \"string\", nullable: true },\r",
							"      dueReminder: { type: \"string\", nullable: true },\r",
							"      email: { type: \"string\", nullable: true },\r",
							"      idBoard: { type: \"string\" },\r",
							"      idList: { type: \"string\" },\r",
							"      idMembers: { type: \"array\" },\r",
							"      idMembersVoted: { type: \"array\" },\r",
							"      idShort: { type: \"number\" },\r",
							"      idAttachmentCover: { type: \"string\", nullable: true },\r",
							"      labels: { type: \"array\" },\r",
							"      idLabels: { type: \"array\" },\r",
							"      manualCoverAttachment: { type: \"boolean\" },\r",
							"      name: { type: \"string\" },\r",
							"      pos: { type: \"number\" },\r",
							"      shortLink: { type: \"string\" },\r",
							"      shortUrl: { type: \"string\" },\r",
							"      start: { type: \"string\", nullable: true },\r",
							"      subscribed: { type: \"boolean\" },\r",
							"      url: { type: \"string\" },\r",
							"      cover: { type: \"object\" },\r",
							"      isTemplate: { type: \"boolean\" },\r",
							"      cardRole: { type: \"string\", nullable: true },\r",
							"      attachments: { type: \"array\" },\r",
							"      stickers: { type: \"array\" },\r",
							"      limits: { type: \"object\" }\r",
							"    },\r",
							"    required: [\r",
							"      \"id\",\r",
							"      \"badges\",\r",
							"      \"checkItemStates\",\r",
							"      \"closed\",\r",
							"      \"dueComplete\",\r",
							"      \"dateLastActivity\",\r",
							"      \"desc\",\r",
							"      \"descData\",\r",
							"      \"due\",\r",
							"      \"dueReminder\",\r",
							"      \"email\",\r",
							"      \"idBoard\",\r",
							"      \"idList\",\r",
							"      \"idMembers\",\r",
							"      \"idMembersVoted\",\r",
							"      \"idShort\",\r",
							"      \"idAttachmentCover\",\r",
							"      \"labels\",\r",
							"      \"idLabels\",\r",
							"      \"manualCoverAttachment\",\r",
							"      \"name\",\r",
							"      \"pos\",\r",
							"      \"shortLink\",\r",
							"      \"shortUrl\",\r",
							"      \"start\",\r",
							"      \"subscribed\",\r",
							"      \"url\",\r",
							"      \"cover\",\r",
							"      \"isTemplate\",\r",
							"      \"cardRole\",\r",
							"      \"attachments\",\r",
							"      \"stickers\",\r",
							"      \"limits\"\r",
							"    ]\r",
							"  };\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get a random name of the Card\r",
							"function getcardnameItem() {\r",
							"    var cardname = [\"In-Scope\",\"Out-Scope\",\"Objectives\",\"Entry Critria\",\"Exit Critria\",\"User Stories\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * cardname.length);\r",
							"    return cardname[randomIndex];\r",
							"}\r",
							"// Make an environment variable called Cardname \r",
							"pm.environment.set(\"Card name\", getcardnameItem());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/cards?idList={{list id}}&key={{key}}&token={{token}}&name={{Card name}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "idList",
							"value": "{{list id}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "{{Card name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET CARD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is GET\r",
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"GET\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							" // Make a variable to store jsondata\r",
							"var jsonData = pm.response.json();\r",
							" // make a variable called Card id \r",
							"pm.environment.set(\"card id\", jsonData.id);\r",
							" // make a variable called badges \r",
							"pm.environment.set(\"badges\", jsonData.badges);\r",
							"\r",
							"// check the name of the Card\r",
							"var cardname = pm.environment.get(\"Card name\");\r",
							"pm.test(\"Card Name is correct\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(cardname);\r",
							"});\r",
							"// check the id of the Card\r",
							"var cardid = pm.environment.get(\"card id\");\r",
							"pm.test(\"Card id is correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(cardid);\r",
							"});\r",
							"// check the id of the board\r",
							"var boardid = pm.environment.get(\"board id\");\r",
							"pm.test(\"Board id is correct\", function () {\r",
							"    pm.expect(jsonData.idBoard).to.eql(boardid);\r",
							"});\r",
							"// Verify the response contains the necessary properties\r",
							"pm.test(\"Response contains the necessary properties\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"badges\");\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"checkItemStates\");\r",
							"    pm.expect(jsonData).to.have.property(\"closed\");\r",
							"    pm.expect(jsonData).to.have.property(\"dueComplete\");\r",
							"    pm.expect(jsonData).to.have.property(\"dateLastActivity\");\r",
							"    pm.expect(jsonData).to.have.property(\"desc\");\r",
							"    pm.expect(jsonData).to.have.property(\"descData\");\r",
							"    pm.expect(jsonData).to.have.property(\"due\");\r",
							"    pm.expect(jsonData).to.have.property(\"dueReminder\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"    pm.expect(jsonData).to.have.property(\"idBoard\");\r",
							"    pm.expect(jsonData).to.have.property(\"idList\");\r",
							"    pm.expect(jsonData).to.have.property(\"idMembers\");\r",
							"    pm.expect(jsonData).to.have.property(\"idMembersVoted\");\r",
							"    pm.expect(jsonData).to.have.property(\"idShort\");\r",
							"    pm.expect(jsonData).to.have.property(\"idAttachmentCover\");\r",
							"    pm.expect(jsonData).to.have.property(\"labels\");\r",
							"    pm.expect(jsonData).to.have.property(\"idLabels\");\r",
							"    pm.expect(jsonData).to.have.property(\"manualCoverAttachment\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"pos\");\r",
							"    pm.expect(jsonData).to.have.property(\"shortLink\");\r",
							"    pm.expect(jsonData).to.have.property(\"shortUrl\");\r",
							"    pm.expect(jsonData).to.have.property(\"start\");\r",
							"    pm.expect(jsonData).to.have.property(\"subscribed\");\r",
							"    pm.expect(jsonData).to.have.property(\"url\");\r",
							"    pm.expect(jsonData).to.have.property(\"cover\");\r",
							"    pm.expect(jsonData).to.have.property(\"isTemplate\");\r",
							"    pm.expect(jsonData).to.have.property(\"cardRole\");\r",
							"});\r",
							"\r",
							"// Verify the id field is a non-empty\r",
							"pm.test(\"The id field is a non-empty \", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"// Verify the name field is a non-empty\r",
							"pm.test(\"The name field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the id board field is a non-empty\r",
							"pm.test(\"The id board field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.idBoard).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"// Verify there is no field in the API response equal null\r",
							"// check the Id of the Card is not equal null\r",
							"pm.test(\"The Card id is not equal null \", function () {\r",
							"        pm.expect(jsonData.id).to.not.eql(null);\r",
							"});\r",
							"// check the name of the Card is not equal null\r",
							"pm.test(\"The Card name is not equal null \", function () {\r",
							"        pm.expect(jsonData.name).to.not.eql(null);\r",
							"});\r",
							"// check the id of the board is not equal null\r",
							"pm.test(\"The board id is not equal null \", function () {\r",
							"        pm.expect(jsonData.idBoard).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the name of card is string\r",
							"pm.test(\"The name of card data is String\", function () {\r",
							"        pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id is string\r",
							"pm.test(\"The id is string \", function () {\r",
							"    pm.expect(typeof jsonData.id).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id Board is string\r",
							"pm.test(\"The Board id is string \", function () {\r",
							"    pm.expect(typeof jsonData.idBoard).to.be.eql(\"string\");\r",
							"});\r",
							"// check the checkItemStates is array\r",
							"pm.test(\"The checkItemStates is array\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.checkItemStates).to.exist.and.to.be.an('array');\r",
							"});\r",
							"// check the idMembers is array\r",
							"pm.test(\"The idMembers is array\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.idMembers).to.exist.and.to.be.an('array');\r",
							"});\r",
							"// check the idMembersVoted is array\r",
							"pm.test(\"The idMembersVoted is array\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.idMembersVoted).to.exist.and.to.be.an('array');\r",
							"});\r",
							"// check the labels is array\r",
							"pm.test(\"The labels is array\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.labels).to.exist.and.to.be.an('array');\r",
							"});\r",
							"// check the idLabels is array\r",
							"pm.test(\"The idLabels is array\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.idLabels).to.exist.and.to.be.an('array');\r",
							"});\r",
							"// check the closed is boolean\r",
							"pm.test(\"The closed field is boolean\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.closed).to.be.a('boolean');\r",
							"});\r",
							"// check the closed is boolean\r",
							"pm.test(\"The dueComplete field is boolean\", function () {\r",
							"  pm.expect(jsonData.dueComplete).to.be.a('boolean');\r",
							"});\r",
							"// Verify the Schema is valid\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      id: {\r",
							"        type: \"string\",\r",
							"        minLength: 1\r",
							"      },\r",
							"      badges: {\r",
							"        type: \"object\"\r",
							"      },\r",
							"      checkItemStates: {\r",
							"        type: \"array\"\r",
							"      },\r",
							"      closed: {\r",
							"        type: \"boolean\"\r",
							"      },\r",
							"      dueComplete: {\r",
							"        type: \"boolean\"\r",
							"      },\r",
							"      dateLastActivity: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      desc: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      descData: {\r",
							"        type: \"object\"\r",
							"      },\r",
							"      due: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      dueReminder: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      email: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      idBoard: {\r",
							"        type: \"string\",\r",
							"        minLength: 1\r",
							"      },\r",
							"      idList: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      idMembers: {\r",
							"        type: \"array\"\r",
							"      },\r",
							"      idMembersVoted: {\r",
							"        type: \"array\"\r",
							"      },\r",
							"      idShort: {\r",
							"        type: \"number\"\r",
							"      },\r",
							"      idAttachmentCover: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      labels: {\r",
							"        type: \"array\"\r",
							"      },\r",
							"      idLabels: {\r",
							"        type: \"array\"\r",
							"      },\r",
							"      manualCoverAttachment: {\r",
							"        type: \"boolean\"\r",
							"      },\r",
							"      name: {\r",
							"        type: \"string\",\r",
							"        minLength: 1\r",
							"      },\r",
							"      pos: {\r",
							"        type: \"number\"\r",
							"      },\r",
							"      shortLink: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      shortUrl: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      start: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      subscribed: {\r",
							"        type: \"boolean\"\r",
							"      },\r",
							"      url: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      cover: {\r",
							"        type: \"object\"\r",
							"      },\r",
							"      isTemplate: {\r",
							"        type: \"boolean\"\r",
							"      },\r",
							"      cardRole: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      attachments: {\r",
							"        type: \"array\"\r",
							"      },\r",
							"      stickers: {\r",
							"        type: \"array\"\r",
							"      },\r",
							"      limits: {\r",
							"        type: \"object\"\r",
							"      }\r",
							"    },\r",
							"    required: [\"id\", \"badges\", \"checkItemStates\", \"closed\", \"dueComplete\", \"dateLastActivity\", \"desc\", \"descData\", \"due\", \"dueReminder\", \"email\", \"idBoard\", \"idList\", \"idMembers\", \"idMembersVoted\", \"idShort\", \"idAttachmentCover\", \"labels\", \"idLabels\", \"manualCoverAttachment\", \"name\", \"pos\", \"shortLink\", \"shortUrl\", \"start\", \"subscribed\", \"url\", \"cover\", \"isTemplate\", \"cardRole\", \"attachments\", \"stickers\", \"limits\"],\r",
							"  };\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/cards/{{card id}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"cards",
						"{{card id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET FIELD ON CARD(name))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is GET\r",
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"GET\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"// Make a variable to store jsondata\r",
							"var jsonData = pm.response.json();\r",
							"// check the name of the card is not equal null\r",
							"pm.test(\"The Card name is not equal null \", function () {\r",
							"        pm.expect(jsonData._value).to.not.eql(null);\r",
							"});\r",
							"// Verify the response value is not empty\r",
							"pm.test(\"The response value is not empty\", function () {\r",
							"    pm.expect(jsonData._value).to.not.be.empty;\r",
							"});\r",
							"// Verify the response value is a string\r",
							"pm.test(\"The response value is a string\", function () {\r",
							"    pm.expect(jsonData._value).to.be.a('string');\r",
							"});\r",
							"// Verify the Schema is valid\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      _value: {\r",
							"        type: \"string\"\r",
							"      }\r",
							"    },\r",
							"    required: [\"_value\"],\r",
							"  };\r",
							"\r",
							"  var response = pm.response.json();\r",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/cards/{{card id}}/name?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"cards",
						"{{card id}}",
						"name"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE CARD ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get a random name of the Card\r",
							"function getcardnameItem() {\r",
							"    var cardname = [\"Meetings\",\"Iterations\",\"Requirements\",\"Changes\", \"Developement\",\"Testing\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * cardname.length);\r",
							"    return cardname[randomIndex];\r",
							"}\r",
							"// Update an environment variable \"Card name\" with the new data \r",
							"pm.environment.set(\"Card name\", getcardnameItem());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is PUT\r",
							"pm.test(\"Successful PUT request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"PUT\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							" // Make a variable to store jsondata\r",
							"var jsonData = pm.response.json();\r",
							" // make a variable called Card id \r",
							"pm.environment.set(\"card id\", jsonData.id);\r",
							" // make a variable called badges \r",
							"pm.environment.set(\"badges\", jsonData.badges);\r",
							"\r",
							"// check the name of the Card\r",
							"var cardname = pm.environment.get(\"Card name\");\r",
							"pm.test(\"Card Name is correct\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(cardname);\r",
							"});\r",
							"// check the id of the Card\r",
							"var cardid = pm.environment.get(\"card id\");\r",
							"pm.test(\"Card id is correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(cardid);\r",
							"});\r",
							"// check the id of the board\r",
							"var boardid = pm.environment.get(\"board id\");\r",
							"pm.test(\"Board id is correct\", function () {\r",
							"    pm.expect(jsonData.idBoard).to.eql(boardid);\r",
							"});\r",
							"// Verify the response contains the necessary properties\r",
							"pm.test(\"Response contains the necessary properties\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"badges\");\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"checkItemStates\");\r",
							"    pm.expect(jsonData).to.have.property(\"closed\");\r",
							"    pm.expect(jsonData).to.have.property(\"dueComplete\");\r",
							"    pm.expect(jsonData).to.have.property(\"dateLastActivity\");\r",
							"    pm.expect(jsonData).to.have.property(\"desc\");\r",
							"    pm.expect(jsonData).to.have.property(\"descData\");\r",
							"    pm.expect(jsonData).to.have.property(\"due\");\r",
							"    pm.expect(jsonData).to.have.property(\"dueReminder\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"    pm.expect(jsonData).to.have.property(\"idBoard\");\r",
							"    pm.expect(jsonData).to.have.property(\"idList\");\r",
							"    pm.expect(jsonData).to.have.property(\"idMembers\");\r",
							"    pm.expect(jsonData).to.have.property(\"idMembersVoted\");\r",
							"    pm.expect(jsonData).to.have.property(\"idShort\");\r",
							"    pm.expect(jsonData).to.have.property(\"idAttachmentCover\");\r",
							"    pm.expect(jsonData).to.have.property(\"labels\");\r",
							"    pm.expect(jsonData).to.have.property(\"idLabels\");\r",
							"    pm.expect(jsonData).to.have.property(\"manualCoverAttachment\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"pos\");\r",
							"    pm.expect(jsonData).to.have.property(\"shortLink\");\r",
							"    pm.expect(jsonData).to.have.property(\"shortUrl\");\r",
							"    pm.expect(jsonData).to.have.property(\"start\");\r",
							"    pm.expect(jsonData).to.have.property(\"subscribed\");\r",
							"    pm.expect(jsonData).to.have.property(\"url\");\r",
							"    pm.expect(jsonData).to.have.property(\"cover\");\r",
							"    pm.expect(jsonData).to.have.property(\"isTemplate\");\r",
							"    pm.expect(jsonData).to.have.property(\"cardRole\");\r",
							"});\r",
							"\r",
							"// Verify the id field is a non-empty\r",
							"pm.test(\"The id field is a non-empty \", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"// Verify the name field is a non-empty\r",
							"pm.test(\"The name field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the id board field is a non-empty\r",
							"pm.test(\"The id board field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.idBoard).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"// Verify there is no field in the API response equal null\r",
							"// check the Id of the Card is not equal null\r",
							"pm.test(\"The Card id is not equal null \", function () {\r",
							"        pm.expect(jsonData.id).to.not.eql(null);\r",
							"});\r",
							"// check the name of the Card is not equal null\r",
							"pm.test(\"The Card name is not equal null \", function () {\r",
							"        pm.expect(jsonData.name).to.not.eql(null);\r",
							"});\r",
							"// check the id of the board is not equal null\r",
							"pm.test(\"The board id is not equal null \", function () {\r",
							"        pm.expect(jsonData.idBoard).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the name of card is string\r",
							"pm.test(\"The name of card data is String\", function () {\r",
							"        pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id is string\r",
							"pm.test(\"The id is string \", function () {\r",
							"    pm.expect(typeof jsonData.id).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id Board is string\r",
							"pm.test(\"The Board id is string \", function () {\r",
							"    pm.expect(typeof jsonData.idBoard).to.be.eql(\"string\");\r",
							"});\r",
							"// check the checkItemStates is array\r",
							"pm.test(\"The checkItemStates is array\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.checkItemStates).to.exist.and.to.be.an('array');\r",
							"});\r",
							"// check the idMembers is array\r",
							"pm.test(\"The idMembers is array\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.idMembers).to.exist.and.to.be.an('array');\r",
							"});\r",
							"// check the idMembersVoted is array\r",
							"pm.test(\"The idMembersVoted is array\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.idMembersVoted).to.exist.and.to.be.an('array');\r",
							"});\r",
							"// check the labels is array\r",
							"pm.test(\"The labels is array\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.labels).to.exist.and.to.be.an('array');\r",
							"});\r",
							"// check the idLabels is array\r",
							"pm.test(\"The idLabels is array\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.idLabels).to.exist.and.to.be.an('array');\r",
							"});\r",
							"// check the closed is boolean\r",
							"pm.test(\"The closed field is boolean\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.closed).to.be.a('boolean');\r",
							"});\r",
							"// check the closed is boolean\r",
							"pm.test(\"The dueComplete field is boolean\", function () {\r",
							"  pm.expect(jsonData.dueComplete).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"// Verify the Schema is valid\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      id: {\r",
							"        type: \"string\",\r",
							"        minLength: 1\r",
							"      },\r",
							"      badges: {\r",
							"        type: \"object\"\r",
							"      },\r",
							"      checkItemStates: {\r",
							"        type: \"array\"\r",
							"      },\r",
							"      closed: {\r",
							"        type: \"boolean\"\r",
							"      },\r",
							"      dueComplete: {\r",
							"        type: \"boolean\"\r",
							"      },\r",
							"      dateLastActivity: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      desc: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      descData: {\r",
							"        type: \"object\"\r",
							"      },\r",
							"      due: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      dueReminder: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      email: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      idBoard: {\r",
							"        type: \"string\",\r",
							"        minLength: 1\r",
							"      },\r",
							"      idList: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      idMembers: {\r",
							"        type: \"array\"\r",
							"      },\r",
							"      idMembersVoted: {\r",
							"        type: \"array\"\r",
							"      },\r",
							"      idShort: {\r",
							"        type: \"number\"\r",
							"      },\r",
							"      idAttachmentCover: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      labels: {\r",
							"        type: \"array\"\r",
							"      },\r",
							"      idLabels: {\r",
							"        type: \"array\"\r",
							"      },\r",
							"      manualCoverAttachment: {\r",
							"        type: \"boolean\"\r",
							"      },\r",
							"      name: {\r",
							"        type: \"string\",\r",
							"        minLength: 1\r",
							"      },\r",
							"      pos: {\r",
							"        type: \"number\"\r",
							"      },\r",
							"      shortLink: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      shortUrl: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      start: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      subscribed: {\r",
							"        type: \"boolean\"\r",
							"      },\r",
							"      url: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      cover: {\r",
							"        type: \"object\"\r",
							"      },\r",
							"      isTemplate: {\r",
							"        type: \"boolean\"\r",
							"      },\r",
							"      cardRole: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      attachments: {\r",
							"        type: \"array\"\r",
							"      },\r",
							"      stickers: {\r",
							"        type: \"array\"\r",
							"      },\r",
							"      limits: {\r",
							"        type: \"object\"\r",
							"      }\r",
							"    },\r",
							"    required: [\"id\", \"badges\", \"checkItemStates\", \"closed\", \"dueComplete\", \"dateLastActivity\", \"desc\", \"descData\", \"due\", \"dueReminder\", \"email\", \"idBoard\", \"idList\", \"idMembers\", \"idMembersVoted\", \"idShort\", \"idAttachmentCover\", \"labels\", \"idLabels\", \"manualCoverAttachment\", \"name\", \"pos\", \"shortLink\", \"shortUrl\", \"start\", \"subscribed\", \"url\", \"cover\", \"isTemplate\", \"cardRole\", \"attachments\", \"stickers\", \"limits\"],\r",
							"  };\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/cards/{{card id}}?key={{key}}&token={{token}}&name={{Card name}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"cards",
						"{{card id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "{{Card name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new Label on a Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is POST\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"POST\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							" // Make a variable to store jsondata\r",
							"var jsonData = pm.response.json();\r",
							"// check the id of the board\r",
							"var boardid = pm.environment.get(\"board id\");\r",
							"pm.test(\"Board id is correct\", function () {\r",
							"    pm.expect(jsonData.idBoard).to.eql(boardid);\r",
							"});\r",
							"// Verify the response contains the necessary properties\r",
							"pm.test(\"Response contains the necessary properties\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"idBoard\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"color\");;\r",
							"    pm.expect(jsonData).to.have.property(\"uses\");\r",
							"    pm.expect(jsonData).to.have.property(\"limits\");\r",
							"});\r",
							"\r",
							"// Verify the id field is a non-empty\r",
							"pm.test(\"The id field is a non-empty \", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the id board field is a non-empty\r",
							"pm.test(\"The id board field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.idBoard).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the name field is a non-empty\r",
							"pm.test(\"The name field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"// Verify there is no field in the API response equal null\r",
							"// check the id of the label is not equal null\r",
							"pm.test(\"The label id is not equal null \", function () {\r",
							"        pm.expect(jsonData.id).to.not.eql(null);\r",
							"});\r",
							"// check the name of the Card is not equal null\r",
							"pm.test(\"The label name is not equal null \", function () {\r",
							"        pm.expect(jsonData.name).to.not.eql(null);\r",
							"});\r",
							"// check the id of the board is not equal null\r",
							"pm.test(\"The board id is not equal null \", function () {\r",
							"        pm.expect(jsonData.idBoard).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the name of label is string\r",
							"pm.test(\"The name of label is String\", function () {\r",
							"        pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id is string\r",
							"pm.test(\"The id is string \", function () {\r",
							"    pm.expect(typeof jsonData.id).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id Board is string\r",
							"pm.test(\"The Board id is string \", function () {\r",
							"    pm.expect(typeof jsonData.idBoard).to.be.eql(\"string\");\r",
							"});\r",
							"// check the color is string\r",
							"pm.test(\"The checkItemStates is string\", function () {\r",
							"  pm.expect(jsonData).to.be.an('object');\r",
							"  pm.expect(jsonData.color).to.exist.and.to.be.an('string');\r",
							"});\r",
							"// Verify the uses field is a number\r",
							"pm.test(\"The uses field is a number\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.uses).to.be.a('number');\r",
							"});\r",
							"// Verify the Schema is valid\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      id: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      idBoard: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      name: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      color: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      uses: {\r",
							"        type: \"number\"\r",
							"      },\r",
							"      limits: {\r",
							"        type: \"object\"\r",
							"      }\r",
							"    },\r",
							"    required: [\"id\", \"idBoard\", \"name\", \"color\", \"uses\", \"limits\"]\r",
							"  };\r",
							"\r",
							"  var response = pm.response.json();\r",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get a random color of the label\r",
							"function getlabecolor() {\r",
							"    var labelcolor = [\"red\",\"yellow\",\"green\", \"black\",\"purple\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * labelcolor.length);\r",
							"    return labelcolor[randomIndex];\r",
							"}\r",
							"// Get a random name of the label\r",
							"function getlabename() {\r",
							"    var labelname = [\"label1\",\"label2\",\"label3\", \"label4\", \"label5\",\"label6\", \"label7\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * labelname.length);\r",
							"    return labelname[randomIndex];\r",
							"}\r",
							"// Make an environment variable called label color \r",
							"pm.environment.set(\"label color\", getlabecolor());\r",
							"// Make an environment variable called label name \r",
							"pm.environment.set(\"label name\", getlabename());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/cards/{{card id}}/labels?color={{label color}}&key={{key}}&token={{token}}&name={{label name}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"cards",
						"{{card id}}",
						"labels"
					],
					"query": [
						{
							"key": "color",
							"value": "{{label color}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "{{label name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Attachment On Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is POST\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"POST\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							" // Make a variable to store jsondata\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"attachment id\", jsonData.id);\r",
							"// check the id of the attatchment\r",
							"var attatchmentid = pm.environment.get(\"attachment id\");\r",
							"pm.test(\"Attatchment id is correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(attatchmentid);\r",
							"});\r",
							"\r",
							"// Verify the response contains the necessary properties\r",
							"pm.test(\"Response contains the necessary properties\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"bytes\");\r",
							"    pm.expect(jsonData).to.have.property(\"date\");\r",
							"    pm.expect(jsonData).to.have.property(\"edgeColor\");;\r",
							"    pm.expect(jsonData).to.have.property(\"idMember\");\r",
							"    pm.expect(jsonData).to.have.property(\"isUpload\");\r",
							"    pm.expect(jsonData).to.have.property(\"mimeType\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"previews\");\r",
							"    pm.expect(jsonData).to.have.property(\"url\");\r",
							"    pm.expect(jsonData).to.have.property(\"pos\");\r",
							"});\r",
							"\r",
							"// Verify the id field is a non-empty\r",
							"pm.test(\"The id field is a non-empty \", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the name field is a non-empty\r",
							"pm.test(\"The name field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"// Verify there is no field in the API response equal null\r",
							"// check the id is not equal null\r",
							"pm.test(\"The id is not equal null \", function () {\r",
							"        pm.expect(jsonData.id).to.not.eql(null);\r",
							"});\r",
							"// check the name of the attatchment is not equal null\r",
							"pm.test(\"The attatchment name is not equal null \", function () {\r",
							"        pm.expect(jsonData.name).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the name of attatchment is string\r",
							"pm.test(\"The name of attatchment is String\", function () {\r",
							"        pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id is string\r",
							"pm.test(\"The id is string \", function () {\r",
							"    pm.expect(typeof jsonData.id).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// Verify the Schema is valid\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      id: { type: \"string\" },\r",
							"      bytes: { type: [\"null\", \"number\"] },\r",
							"      date: { type: \"string\" },\r",
							"      edgeColor: { type: [\"null\", \"string\"] },\r",
							"      idMember: { type: \"string\" },\r",
							"      isUpload: { type: \"boolean\" },\r",
							"      mimeType: { type: [\"null\", \"string\"] },\r",
							"      name: { type: \"string\" },\r",
							"      previews: { type: \"array\" },\r",
							"      url: { type: \"string\" },\r",
							"      pos: { type: \"number\" },\r",
							"      fileName: { type: \"string\" },\r",
							"      limits: { type: \"object\" }\r",
							"    },\r",
							"    required: [\"id\", \"bytes\", \"date\", \"edgeColor\", \"idMember\", \"isUpload\", \"mimeType\", \"name\", \"previews\", \"url\", \"pos\", \"fileName\", \"limits\"]\r",
							"  };\r",
							"\r",
							"  var response = pm.response.json();\r",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the name of the attachment\r",
							"function attachmentname() {\r",
							"    var attachmentname = [\"Mohamed Website\"]; \r",
							"    return attachmentname;\r",
							"}\r",
							"// Get the url of the attachment\r",
							"function attachmenturl() {\r",
							"    var attachmenturl = [\"https://mochxd.github.io/Mohamedmostafa.github.io/\"]; \r",
							"    return attachmenturl;\r",
							"}\r",
							"// Make an environment variable called attachment name \r",
							"pm.environment.set(\"attachment name\", attachmentname());\r",
							"// Make an environment variable called attachment url \r",
							"pm.environment.set(\"attachment url\", attachmenturl());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{base_url}}/1/cards/{{card id}}/attachments?key={{key}}&token={{token}}&name={{attachment name}}&url={{attachment url}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"cards",
						"{{card id}}",
						"attachments"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "{{attachment name}}"
						},
						{
							"key": "url",
							"value": "{{attachment url}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an Attachment on a Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is GET\r",
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"GET\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							" // Make a variable to store jsondata\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// check the id of the attatchment\r",
							"var attatchmentid = pm.environment.get(\"attachment id\");\r",
							"pm.test(\"Attatchment id is correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(attatchmentid);\r",
							"});\r",
							"\r",
							"// Verify the response contains the necessary properties\r",
							"pm.test(\"Response contains the necessary properties\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"bytes\");\r",
							"    pm.expect(jsonData).to.have.property(\"date\");\r",
							"    pm.expect(jsonData).to.have.property(\"edgeColor\");;\r",
							"    pm.expect(jsonData).to.have.property(\"idMember\");\r",
							"    pm.expect(jsonData).to.have.property(\"isUpload\");\r",
							"    pm.expect(jsonData).to.have.property(\"mimeType\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"previews\");\r",
							"    pm.expect(jsonData).to.have.property(\"url\");\r",
							"    pm.expect(jsonData).to.have.property(\"pos\");\r",
							"});\r",
							"\r",
							"// Verify the id field is a non-empty\r",
							"pm.test(\"The id field is a non-empty \", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the name field is a non-empty\r",
							"pm.test(\"The name field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"// Verify there is no field in the API response equal null\r",
							"// check the id is not equal null\r",
							"pm.test(\"The id is not equal null \", function () {\r",
							"        pm.expect(jsonData.id).to.not.eql(null);\r",
							"});\r",
							"// check the name of the attatchment is not equal null\r",
							"pm.test(\"The attatchment name is not equal null \", function () {\r",
							"        pm.expect(jsonData.name).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the name of attatchment is string\r",
							"pm.test(\"The name of attatchment is String\", function () {\r",
							"        pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id is string\r",
							"pm.test(\"The id is string \", function () {\r",
							"    pm.expect(typeof jsonData.id).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// Verify the Schema is valid\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      id: { type: \"string\" },\r",
							"      bytes: { type: \"null\" },\r",
							"      date: { type: \"string\" },\r",
							"      edgeColor: { type: \"null\" },\r",
							"      idMember: { type: \"string\" },\r",
							"      isUpload: { type: \"boolean\" },\r",
							"      mimeType: { type: \"string\" },\r",
							"      name: { type: \"string\" },\r",
							"      previews: { type: \"array\" },\r",
							"      url: { type: \"string\" },\r",
							"      pos: { type: \"number\" },\r",
							"      fileName: { type: \"string\" }\r",
							"    },\r",
							"    required: [\"id\", \"bytes\", \"date\", \"edgeColor\", \"idMember\", \"isUpload\", \"mimeType\", \"name\", \"previews\", \"url\", \"pos\", \"fileName\"]\r",
							"  };\r",
							"\r",
							"  var response = pm.response.json();\r",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/cards/{{card id}}/attachments/{{attachment id}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"cards",
						"{{card id}}",
						"attachments",
						"{{attachment id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create  Checklist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is POST\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"POST\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							" // Make a variable to store data\r",
							"var jsonData = pm.response.json();\r",
							" // Make a variable called checklist id\r",
							"pm.environment.set(\"checklist id\",jsonData.id);\r",
							"\r",
							"// check the id of the checklist\r",
							"var checklistid = pm.environment.get(\"checklist id\");\r",
							"pm.test(\"checklist id is correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(checklistid);\r",
							"});\r",
							"// check the name of the checklist\r",
							"var checklist = pm.environment.get(\"checklist name\");\r",
							"pm.test(\"checklist Name is correct\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(checklist);\r",
							"});\r",
							"// check the id of the board\r",
							"var boardid = pm.environment.get(\"board id\");\r",
							"pm.test(\"Board id is correct\", function () {\r",
							"    pm.expect(jsonData.idBoard).to.eql(boardid);\r",
							"});\r",
							"// check the id of the card\r",
							"var cardid = pm.environment.get(\"card id\");\r",
							"pm.test(\"Card id is correct\", function () {\r",
							"    pm.expect(jsonData.idCard).to.eql(cardid);\r",
							"});\r",
							"\r",
							"// Verify there is no field in the API response equal null\r",
							"// check the id of the checklist is not equal null\r",
							"pm.test(\"The id of the checklist is not equal null \", function () {\r",
							"        pm.expect(jsonData.id).to.not.eql(null);\r",
							"});\r",
							"// check the name of the checklist is not equal null\r",
							"pm.test(\"The name of the checklist is not equal null \", function () {\r",
							"        pm.expect(jsonData.name).to.not.eql(null);\r",
							"});\r",
							"// check the id of the board is not equal null\r",
							"pm.test(\"The id of board is not equal null \", function () {\r",
							"        pm.expect(jsonData.idBoard).to.not.eql(null);\r",
							"});\r",
							"// check the id of the card is not equal null\r",
							"pm.test(\"The id of card is not equal null \", function () {\r",
							"        pm.expect(jsonData.idCard).to.not.eql(null);\r",
							"});\r",
							"\r",
							"// Verify the response contains the necessary properties\r",
							"pm.test(\"Response contains the necessary properties\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"idBoard\");\r",
							"    pm.expect(jsonData).to.have.property(\"idCard\");\r",
							"    pm.expect(jsonData).to.have.property(\"pos\");\r",
							"    pm.expect(jsonData).to.have.property(\"checkItems\");\r",
							"    pm.expect(jsonData).to.have.property(\"limits\");\r",
							"});\r",
							"\r",
							"// Verify the id field is a non-empty\r",
							"pm.test(\"The id field is a non-empty \", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the name field is a non-empty\r",
							"pm.test(\"The name field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the id board field is a non-empty\r",
							"pm.test(\"The id board field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.idBoard).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the id Card field is a non-empty\r",
							"pm.test(\"The id Card field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.idCard).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the name of the checklist is String\r",
							"pm.test(\"The name of the checklist is string\", function () {\r",
							"    pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id of the checklist is String\r",
							"pm.test(\"The id of the checklist is string\", function () {\r",
							"    pm.expect(typeof jsonData.id).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id Board is String\r",
							"pm.test(\"The id Board is string\", function () {\r",
							"    pm.expect(typeof jsonData.idBoard).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id Card is String\r",
							"pm.test(\"The id Card is string\", function () {\r",
							"    pm.expect(typeof jsonData.idCard).to.be.eql(\"string\");\r",
							"});\r",
							"// check the pos is number\r",
							"pm.test(\"The pos is number\", function () {\r",
							"    pm.expect(typeof jsonData.pos).to.be.eql(\"number\");\r",
							"});\r",
							"\r",
							"// Verify the Schema is valid\r",
							"pm.test(\"Response schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      id: { type: \"string\" },\r",
							"      name: { type: \"string\" },\r",
							"      idBoard: { type: \"string\" },\r",
							"      idCard: { type: \"string\" },\r",
							"      pos: { type: \"number\" },\r",
							"      checkItems: { type: \"array\" },\r",
							"      limits: { type: \"object\" }\r",
							"    },\r",
							"    required: [\"id\", \"name\", \"idBoard\", \"idCard\", \"pos\", \"checkItems\", \"limits\"]\r",
							"  };\r",
							"// Verify Response body schema is valid\r",
							"  var response = pm.response.json();\r",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get a random name of the checklist\r",
							"function getchecklistnameItem() {\r",
							"    var checklistname = [\"Doing\",\"To Do\",\"Done\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * checklistname.length);\r",
							"    return checklistname[randomIndex];\r",
							"}\r",
							"// Make an environment variable called checklist \r",
							"pm.environment.set(\"checklist name\", getchecklistnameItem());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/checklists?idCard={{card id}}&key={{key}}&token={{token}}&name={{checklist name}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"checklists"
					],
					"query": [
						{
							"key": "idCard",
							"value": "{{card id}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "{{checklist name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Checklist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is GET",
							"pm.test(\"Successful GET request\", function () {",
							"    pm.actualMethod = pm.request.method;",
							"    pm.expect(pm.actualMethod).to.eq(\"GET\");",
							"});",
							"",
							"// Verify the API Response status code is 200 OK",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Verify the API response is JSON Format",
							"pm.test(\"Content-Type is JSON in header\", function () {",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
							"});",
							" // Make a variable to store jsondata",
							"var jsonData = pm.response.json();",
							" // Make a variable called checklist id",
							"pm.environment.set(\"checklist id\",jsonData.id);",
							"",
							"// check the id of the checklist",
							"var checklistid = pm.environment.get(\"checklist id\");",
							"pm.test(\"checklist id is correct\", function () {",
							"    pm.expect(jsonData.id).to.eql(checklistid);",
							"});",
							"// check the name of the checklist",
							"var checklist = pm.environment.get(\"checklist name\");",
							"pm.test(\"checklist Name is correct\", function () {",
							"    pm.expect(jsonData.name).to.eql(checklist);",
							"});",
							"// check the id of the board",
							"var boardid = pm.environment.get(\"board id\");",
							"pm.test(\"Board id is correct\", function () {",
							"    pm.expect(jsonData.idBoard).to.eql(boardid);",
							"});",
							"// check the id of the card",
							"var cardid = pm.environment.get(\"card id\");",
							"pm.test(\"Card id is correct\", function () {",
							"    pm.expect(jsonData.idCard).to.eql(cardid);",
							"});",
							"",
							"// Verify there is no field in the API response equal null",
							"// check the Id of the checklist is not equal null",
							"pm.test(\"The id of the checklist is not equal null \", function () {",
							"        pm.expect(jsonData.id).to.not.eql(null);",
							"});",
							"// check the name of the checklist is not equal null",
							"pm.test(\"The name of the checklist is not equal null \", function () {",
							"        pm.expect(jsonData.name).to.not.eql(null);",
							"});",
							"// check the Id of the board is not equal null",
							"pm.test(\"The id board is not equal null \", function () {",
							"        pm.expect(jsonData.idBoard).to.not.eql(null);",
							"});",
							"// check the Id of the card is not equal null",
							"pm.test(\"The id card is not equal null \", function () {",
							"        pm.expect(jsonData.idCard).to.not.eql(null);",
							"});",
							"",
							"// Verify the response contains the necessary properties",
							"pm.test(\"Response contains the necessary properties\", function () {",
							"    pm.expect(jsonData).to.have.property(\"id\");",
							"    pm.expect(jsonData).to.have.property(\"name\");",
							"    pm.expect(jsonData).to.have.property(\"idBoard\");",
							"    pm.expect(jsonData).to.have.property(\"idCard\");",
							"    pm.expect(jsonData).to.have.property(\"pos\");",
							"    pm.expect(jsonData).to.have.property(\"checkItems\");",
							"});",
							"",
							"// Verify the id field is a non-empty",
							"pm.test(\"The id field is a non-empty \", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"// Verify the name field is a non-empty",
							"pm.test(\"Thee name field is a non-empty\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"// Verify the id board field is a non-empty",
							"pm.test(\"The id board field is a non-empty\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.idBoard).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"// Verify the id Card field is a non-empty",
							"pm.test(\"The id Card field is a non-empty\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.idCard).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"// Verify the data type of any fields is correct",
							"// check the name of the checklist is String",
							"pm.test(\"The name of the checklist is string\", function () {",
							"    pm.expect(typeof jsonData.name).to.be.eql(\"string\");",
							"});",
							"// check the id of the checklist is String",
							"pm.test(\"The id of the checklist is string\", function () {",
							"    pm.expect(typeof jsonData.id).to.be.eql(\"string\");",
							"});",
							"// check the id Board is String",
							"pm.test(\"The id Board is string\", function () {",
							"    pm.expect(typeof jsonData.idBoard).to.be.eql(\"string\");",
							"});",
							"// check the id Card is String",
							"pm.test(\"The id Card is string\", function () {",
							"    pm.expect(typeof jsonData.idCard).to.be.eql(\"string\");",
							"});",
							"// check the pos is number",
							"pm.test(\"The pos is number\", function () {",
							"    pm.expect(typeof jsonData.pos).to.be.eql(\"number\");",
							"});",
							"",
							"// Verify the Schema is valid",
							"pm.test(\"Response schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      id: { type: \"string\" },",
							"      name: { type: \"string\" },",
							"      idBoard: { type: \"string\" },",
							"      idCard: { type: \"string\" },",
							"      pos: { type: \"number\" },",
							"      checkItems: { type: \"array\" },",
							"    },",
							"    required: [\"id\", \"name\", \"idBoard\", \"idCard\", \"pos\", \"checkItems\"]",
							"  };",
							"// Verify Response body schema is valid",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/checklists/{{checklist id}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"checklists",
						"{{checklist id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Checklist",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get a random name of the checklist\r",
							"function getchecklistnameItem() {\r",
							"    var checklistname = [\"All Team\",\"Juniors\",\"Seniors\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * checklistname.length);\r",
							"    return checklistname[randomIndex];\r",
							"}\r",
							"// Update an environment variable \"checklist\" with the new data \r",
							"pm.environment.set(\"checklist name\", getchecklistnameItem());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is PUT",
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.actualMethod = pm.request.method;",
							"    pm.expect(pm.actualMethod).to.eq(\"PUT\");",
							"});",
							"",
							"// Verify the API Response status code is 200 OK",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Verify the API response is JSON Format",
							"pm.test(\"Content-Type is JSON in header\", function () {",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
							"});",
							" // Make a variable to store jsondata",
							"var jsonData = pm.response.json();",
							" // Make a variable called check checklist id",
							"pm.environment.set(\"checklist id\",jsonData.id);",
							"",
							"// check the id of the checklist",
							"var checklistid = pm.environment.get(\"checklist id\");",
							"pm.test(\"checklist id is correct\", function () {",
							"    pm.expect(jsonData.id).to.eql(checklistid);",
							"});",
							"// check the name of the checklist",
							"var checklist = pm.environment.get(\"checklist name\");",
							"pm.test(\"checklist Name is correct\", function () {",
							"    pm.expect(jsonData.name).to.eql(checklist);",
							"});",
							"// check the id of the board",
							"var boardid = pm.environment.get(\"board id\");",
							"pm.test(\"Board id is correct\", function () {",
							"    pm.expect(jsonData.idBoard).to.eql(boardid);",
							"});",
							"// check the id of the card",
							"var cardid = pm.environment.get(\"card id\");",
							"pm.test(\"Card id is correct\", function () {",
							"    pm.expect(jsonData.idCard).to.eql(cardid);",
							"});",
							"",
							"// Verify there is no field in the API response equal null",
							"// check the id of the checklist is not equal null",
							"pm.test(\"The id of the checklist is not equal null \", function () {",
							"        pm.expect(jsonData.id).to.not.eql(null);",
							"});",
							"// check the name of the checklist is not equal null",
							"pm.test(\"The name of the checklist is not equal null \", function () {",
							"        pm.expect(jsonData.name).to.not.eql(null);",
							"});",
							"// check the id of the board is not equal null",
							"pm.test(\"The id board is not equal null \", function () {",
							"        pm.expect(jsonData.idBoard).to.not.eql(null);",
							"});",
							"// check the id of the card is not equal null",
							"pm.test(\"The id of the card is not equal null \", function () {",
							"        pm.expect(jsonData.idCard).to.not.eql(null);",
							"});",
							"",
							"// Verify the response contains the necessary properties",
							"pm.test(\"Response contains the necessary properties\", function () {",
							"    pm.expect(jsonData).to.have.property(\"id\");",
							"    pm.expect(jsonData).to.have.property(\"name\");",
							"    pm.expect(jsonData).to.have.property(\"idBoard\");",
							"    pm.expect(jsonData).to.have.property(\"idCard\");",
							"    pm.expect(jsonData).to.have.property(\"pos\");",
							"    pm.expect(jsonData).to.have.property(\"checkItems\");",
							"});",
							"",
							"// Verify the id field is a non-empty",
							"pm.test(\"The id field is a non-empty \", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"// Verify the name field is a non-empty",
							"pm.test(\"The name field is a non-empty\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"// Verify the id board field is a non-empty",
							"pm.test(\"The id board field is a non-empty\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.idBoard).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"// Verify the id Card field is a non-empty",
							"pm.test(\"The id Card field is a non-empty\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.idCard).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"// Verify the data type of any fields is correct",
							"// check the name of the checklist is String",
							"pm.test(\"The name of the checklist is string\", function () {",
							"    pm.expect(typeof jsonData.name).to.be.eql(\"string\");",
							"});",
							"// check the id of the checklist is String",
							"pm.test(\"The id of the checklist is string\", function () {",
							"    pm.expect(typeof jsonData.id).to.be.eql(\"string\");",
							"});",
							"// check the id Board is String",
							"pm.test(\"The id Board is string\", function () {",
							"    pm.expect(typeof jsonData.idBoard).to.be.eql(\"string\");",
							"});",
							"// check the id Card is String",
							"pm.test(\"The id Card is string\", function () {",
							"    pm.expect(typeof jsonData.idCard).to.be.eql(\"string\");",
							"});",
							"// check the pos is number",
							"pm.test(\"The pos is number\", function () {",
							"    pm.expect(typeof jsonData.pos).to.be.eql(\"number\");",
							"});",
							"",
							"// Verify the Schema is valid",
							"pm.test(\"Response schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      id: { type: \"string\" },",
							"      name: { type: \"string\" },",
							"      idBoard: { type: \"string\" },",
							"      idCard: { type: \"string\" },",
							"      pos: { type: \"number\" },",
							"      checkItems: { type: \"array\" },",
							"      limits: { type: \"object\" }",
							"    },",
							"    required: [\"id\", \"name\", \"idBoard\", \"idCard\", \"pos\", \"checkItems\", \"limits\"]",
							"  };",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/checklists/{{checklist id}}?key={{key}}&token={{token}}&name={{checklist name}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"checklists",
						"{{checklist id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "{{checklist name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Checkitem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is POST\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"POST\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							" // Make a variable to store data\r",
							"var jsonData = pm.response.json();\r",
							" // Make a variable called checkitem id\r",
							"pm.environment.set(\"checkitem id\",jsonData.id);\r",
							"\r",
							"// check the id of the checkitem\r",
							"var checkitemid = pm.environment.get(\"checkitem id\");\r",
							"pm.test(\"checkitem id is correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(checkitemid);\r",
							"});\r",
							"// check the name of the checkitem\r",
							"var checkitem = pm.environment.get(\"checkitem name\");\r",
							"pm.test(\"checkitem Name is correct\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(checkitem);\r",
							"});\r",
							"\r",
							"// Verify there is no field in the API response equal null\r",
							"// check the id of the checkitem is not equal null\r",
							"pm.test(\"The id of the checkitem is not equal null \", function () {\r",
							"        pm.expect(jsonData.id).to.not.eql(null);\r",
							"});\r",
							"// check the name of the checkitem is not equal null\r",
							"pm.test(\"The name of the checkitem is not equal null \", function () {\r",
							"        pm.expect(jsonData.name).to.not.eql(null);\r",
							"});\r",
							"// Verify the response contains the necessary properties\r",
							"pm.test(\"Response contains the necessary properties\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"nameData\");\r",
							"    pm.expect(jsonData).to.have.property(\"pos\");\r",
							"    pm.expect(jsonData).to.have.property(\"state\");\r",
							"    pm.expect(jsonData).to.have.property(\"dueReminder\");\r",
							"    pm.expect(jsonData).to.have.property(\"idMember\");\r",
							"    pm.expect(jsonData).to.have.property(\"idChecklist\");\r",
							"    pm.expect(jsonData).to.have.property(\"limits\");\r",
							"});\r",
							"\r",
							"// Verify the id field is a non-empty\r",
							"pm.test(\"The id field is a non-empty \", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the name field is a non-empty\r",
							"pm.test(\"The name field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the name of the checkitem is String\r",
							"pm.test(\"The name of the checkitem is string\", function () {\r",
							"    pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id of the checkitem is String\r",
							"pm.test(\"The id of the checkitem is string\", function () {\r",
							"    pm.expect(typeof jsonData.id).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// Verify the Schema is valid\r",
							"pm.test(\"Response schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      id: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      name: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      nameData: {\r",
							"        type: \"object\",\r",
							"        properties: {\r",
							"          emoji: {\r",
							"            type: \"object\"\r",
							"          }\r",
							"        }\r",
							"      },\r",
							"      pos: {\r",
							"        type: \"number\"\r",
							"      },\r",
							"      state: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      due: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      dueReminder: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      idMember: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      idChecklist: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      limits: {\r",
							"        type: \"object\"\r",
							"      }\r",
							"    },\r",
							"    required: [\"id\", \"name\", \"nameData\", \"pos\", \"state\", \"due\", \"dueReminder\", \"idMember\", \"idChecklist\", \"limits\"]\r",
							"  };\r",
							"\r",
							"  var response = pm.response.json();\r",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get a random name of the checkitem\r",
							"function getcheckitemsname() {\r",
							"    var checkitemname = [\"Ahmed\",\"Mohamed\",\"Ali\", \"checkitem1\",\"checkitem2\", \"checkitem3\"]; \r",
							"    var randomIndex = Math.floor(Math.random() * checkitemname.length);\r",
							"    return checkitemname[randomIndex];\r",
							"}\r",
							"// Make an environment variable called checkitems\r",
							"pm.environment.set(\"checkitem name\", getcheckitemsname());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/checklists/{{checklist id}}/checkItems?name={{checkitem name}}&key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"checklists",
						"{{checklist id}}",
						"checkItems"
					],
					"query": [
						{
							"key": "name",
							"value": "{{checkitem name}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Checkitem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is GET\r",
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"GET\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							" // Make a variable to store data\r",
							"var jsonData = pm.response.json();\r",
							" // Make a variable called checkitem id\r",
							"pm.environment.set(\"checkitem id\",jsonData.id);\r",
							"\r",
							"// check the id of the checkitem\r",
							"var checkitemid = pm.environment.get(\"checkitem id\");\r",
							"pm.test(\"checkitem id is correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(checkitemid);\r",
							"});\r",
							"// check the name of the checkitem\r",
							"var checkitem = pm.environment.get(\"checkitem name\");\r",
							"pm.test(\"checkitem Name is correct\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(checkitem);\r",
							"});\r",
							"\r",
							"// Verify there is no field in the API response equal null\r",
							"// check the id of the checkitem is not equal null\r",
							"pm.test(\"The id of the checkitem is not equal null \", function () {\r",
							"        pm.expect(jsonData.id).to.not.eql(null);\r",
							"});\r",
							"// check the name of the checkitem is not equal null\r",
							"pm.test(\"The name of the checkitem is not equal null \", function () {\r",
							"        pm.expect(jsonData.name).to.not.eql(null);\r",
							"});\r",
							"// Verify the response contains the necessary properties\r",
							"pm.test(\"Response contains the necessary properties\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"nameData\");\r",
							"    pm.expect(jsonData).to.have.property(\"pos\");\r",
							"    pm.expect(jsonData).to.have.property(\"state\");\r",
							"    pm.expect(jsonData).to.have.property(\"dueReminder\");\r",
							"    pm.expect(jsonData).to.have.property(\"idMember\");\r",
							"    pm.expect(jsonData).to.have.property(\"idChecklist\");\r",
							"});\r",
							"\r",
							"// Verify the id field is a non-empty\r",
							"pm.test(\"The id field is a non-empty \", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"// Verify the name field is a non-empty\r",
							"pm.test(\"The name field is a non-empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"// Verify the data type of any fields is correct\r",
							"// check the name of the checkitem is String\r",
							"pm.test(\"The name of the checkitem is string\", function () {\r",
							"    pm.expect(typeof jsonData.name).to.be.eql(\"string\");\r",
							"});\r",
							"// check the id of the checkitem is String\r",
							"pm.test(\"The id of the checkitem is string\", function () {\r",
							"    pm.expect(typeof jsonData.id).to.be.eql(\"string\");\r",
							"});\r",
							"\r",
							"// Verify the Schema is valid\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      id: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      name: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      nameData: {\r",
							"        type: \"object\",\r",
							"        properties: {\r",
							"          emoji: {\r",
							"            type: \"object\"\r",
							"          }\r",
							"        }\r",
							"      },\r",
							"      pos: {\r",
							"        type: \"number\"\r",
							"      },\r",
							"      state: {\r",
							"        type: \"string\"\r",
							"      },\r",
							"      due: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      dueReminder: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      idMember: {\r",
							"        type: [\"string\", \"null\"]\r",
							"      },\r",
							"      idChecklist: {\r",
							"        type: \"string\"\r",
							"      }\r",
							"    },\r",
							"    required: [\"id\", \"name\", \"nameData\", \"pos\", \"state\", \"due\", \"dueReminder\", \"idMember\", \"idChecklist\"]\r",
							"  };\r",
							"\r",
							"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/checklists/{{checklist id}}/checkItems/{{checkitem id}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"checklists",
						"{{checklist id}}",
						"checkItems",
						"{{checkitem id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Checkitem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is DELETE\r",
							"pm.test(\"Successful DELETE request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"DELETE\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/checklists/{{checklist id}}/checkItems/{{checkitem id}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"checklists",
						"{{checklist id}}",
						"checkItems",
						"{{checkitem id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE checklist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is DELETE\r",
							"pm.test(\"Successful DELETE request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"DELETE\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/checklists/{{checklist id}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"checklists",
						"{{checklist id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an Attachment on a Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is DELETE\r",
							"pm.test(\"Successful DELETE request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"DELETE\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/cards/{{card id}}/attachments/{{attachment id}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"cards",
						"{{card id}}",
						"attachments",
						"{{attachment id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE CARD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is DELETE\r",
							"pm.test(\"Successful DELETE request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"DELETE\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/cards/{{card id}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"cards",
						"{{card id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE BOARD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the request method is DELETE\r",
							"pm.test(\"Successful DELETE request\", function () {\r",
							"    pm.actualMethod = pm.request.method;\r",
							"    pm.expect(pm.actualMethod).to.eq(\"DELETE\");\r",
							"});\r",
							"\r",
							"// Verify the API Response status code is 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Verify the API response is JSON Format\r",
							"pm.test(\"Content-Type is JSON in header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"});\r",
							"// Verify the API Response has _value property\r",
							"pm.test(\"Response has _value property\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('_value');\r",
							"});\r",
							"// Verify the _value property is null\r",
							"pm.test(\"_value property is null\", function () {\r",
							"    pm.expect(pm.response.json()._value).to.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/1/boards/{{board id}}?key={{key}}&token={{token}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"1",
						"boards",
						"{{board id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Verify the API response time is within accepted.",
					"pm.test(\"Response time is less than 3000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(3000);",
					"});"
				]
			}
		}
	]
}